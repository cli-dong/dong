#!/usr/bin/env node

'use strict';

// check update first
require('update-notifier')({
  pkg: require('../package.json')
}).notify({
  defer: false
})

var join = require('path').join

var chalk = require('chalk')
var commander = require('commander')
var extend = require('extend')

commander
  // version
  .version(require('../package').version)
  // usage
  .usage('<command> [options]')

var existsSync = require('fs').existsSync

var pkgDest = join(process.cwd(), 'package.json')
var pkgExist = existsSync(pkgDest)

var pkg = pkgExist ? require(pkgDest) : null
var slice = Array.prototype.slice

function addCommand(config) {
  var options = config.options

  var defaults = {}

  var cmd = commander
    .command(config.command)
    .description(chalk.cyan(config.description))
    .allowUnknownOption(true)

  if (options) {
    options.forEach(function(option) {
      var str = '--' + option.name

      if (typeof option.defaults !== 'boolean') {
        if (option.optional) {
          str += ' [' + option.name + ']'
        } else {
          str += ' <' + option.name + '>'
        }
      }

      if (option.alias) {
        str = '-' + option.alias + ', ' + str
      }

      cmd.option(str, chalk.green('(' + option.defaults + ') ') + option.description)

      defaults[option.name] = option.defaults
    })
  }

  extend(defaults, pkg && pkg.dong)

  cmd.action(function() {
    // 必须在项目根目录下执行
    // 即：需要有 package.json
    if (config.strict && !pkg) {
      console.log('')
      console.log(chalk.red('  缺少 package.json 文件，请检查'))
      return
    }

    var args = slice.call(arguments)
    var opts

    if (args.length) {
      opts = args.pop()
    }

    if (opts) {
      Object.keys(defaults)
      .forEach(function(name) {
        if (opts.hasOwnProperty(name)) {
          defaults[name] = opts[name]
        }
      })
    }

    defaults.pkg = pkg

    config.bootstrap.apply(null, args.concat(defaults))
  })

  if (config.help) {
    cmd.on('--help', function() {
      config.help(chalk)
    })
  }
}

[
  'build', 'check', 'doc', 'i18n',
  'init', 'patch', 'serve', 'update'
]
.forEach(function(cmd) {
  addCommand(require('dong-' + cmd))
})

commander.parse(process.argv)

process.on('exit', function() {
  if (process.argv.length === 2) {
    console.log(chalk.cyan('        ___                 '))
    console.log(chalk.cyan('    ____/ /___  ____  ____  '))
    console.log(chalk.cyan('   / __  / __ \\/ __ \\/ __ \\ '))
    console.log(chalk.cyan('  / /_/ / /_/ / / / / /_/ / '))
    console.log(chalk.cyan('  \\____/\\____/_/ /_/\\__, /  '))
    console.log(chalk.cyan('                   /____/   '))

    console.log('')
    console.log('  Version: ' + commander.version())

    commander.help()
  }
})
